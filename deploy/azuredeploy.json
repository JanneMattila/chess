{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clientId": {
      "type": "string",
      "metadata": {
        "description": "Azure AD ClientId of API application."
      }
    },
    "applicationIdURI": {
      "type": "string",
      "metadata": {
        "description": "Azure AD API Applications audience."
      }
    },
    "storageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    "cdn": {
      "type": "string",
      "metadata": {
        "description": "CDN name (must be globally unique and map to custom domain name)"
      }
    },
    "customDomain": {
      "type": "string",
      "metadata": {
        "description": "Custom domain assigned to the CDN"
      }
    },
    "alertEmailAddress": {
      "type": "string",
      "metadata": {
        "description": "Alert email address."
      }
    },
    "webPushPublicKey": {
      "type": "string",
      "metadata": {
        "description": "WebPush Public Key. Used in sending web notifications."
      }
    },
    "webPushPrivateKey": {
      "type": "string",
      "metadata": {
        "description": "WebPush Private Key. Used in sending web notifications."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "appName": "mychess",
    "webStorageName": "[concat('mychessweb', uniqueString(resourceGroup().id))]",
    "spaHostname": "[concat(variables('webStorageName'),'.z16.web.core.windows.net')]",
    "appInsightsName": "[concat('ai-',variables('appName'))]",
    "appStorageName": "[concat('mychess', uniqueString(resourceGroup().id))]",
    "appServiceName": "[concat('azfun-',variables('appName'),'-',uniqueString(resourceGroup().id))]",
    "appServicePlanName": "[concat('azappplan-', variables('appName'))]",
    "appAlertActionGroup": "[concat(variables('appName'), 'ActionGroup')]",
    "appInsightsExceptionQueryName": "[concat(variables('appName'), 'AppInsightsExceptionQuery')]",
    "appHighUsageAlertName": "[concat(variables('appName'), 'HighUsageAlert')]",
    "spaAppPing": "SPAPing",
    "backendPing": "BackendPing",
    "cdnName": "[concat('mychesscdn-', uniqueString(resourceGroup().id))]",
    "cdnCustomDomainName": "mychessCustomDomain",
    "customDomainUri": "[concat('https://',parameters('customDomain'))]"
  },
  "resources": [
    {
      "name": "[variables('webStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('location')]",
      "apiVersion": "2018-02-01",
      "sku": {
        "name": "[parameters('storageType')]"
      },
      "dependsOn": [
      ],
      "tags": {
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          }
        }
      }
    },
    {
      "name": "[variables('cdnName')]",
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "2019-04-15",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_Microsoft"
      },
      "properties": {
      },
      "resources": [
        {
          "name": "[parameters('cdn')]",
          "type": "endpoints",
          "apiVersion": "2019-04-15",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[variables('cdnName')]",
            "[variables('webStorageName')]"
          ],
          "properties": {
            "originHostHeader": "[variables('spaHostname')]",
            "isHttpAllowed": true,
            "isHttpsAllowed": true,
            "queryStringCachingBehavior": "IgnoreQueryString",
            "contentTypesToCompress": [
              "application/eot",
              "application/font",
              "application/font-sfnt",
              "application/javascript",
              "application/json",
              "application/opentype",
              "application/otf",
              "application/pkcs7-mime",
              "application/truetype",
              "application/ttf",
              "application/vnd.ms-fontobject",
              "application/xhtml+xml",
              "application/xml",
              "application/xml+rss",
              "application/x-font-opentype",
              "application/x-font-truetype",
              "application/x-font-ttf",
              "application/x-httpd-cgi",
              "application/x-javascript",
              "application/x-mpegurl",
              "application/x-opentype",
              "application/x-otf",
              "application/x-perl",
              "application/x-ttf",
              "font/eot",
              "font/ttf",
              "font/otf",
              "font/opentype",
              "image/svg+xml",
              "text/css",
              "text/csv",
              "text/html",
              "text/javascript",
              "text/js",
              "text/plain",
              "text/richtext",
              "text/tab-separated-values",
              "text/xml",
              "text/x-script",
              "text/x-component",
              "text/x-java-source"
            ],
            "isCompressionEnabled": true,
            "origins": [
              {
                "name": "spaOrigin",
                "properties": {
                  "hostName": "[variables('spaHostname')]"
                }
              }
            ],
            "deliveryPolicy": {
              "description": "Rewrite and Redirect",
              "rules": [
                {
                  "name": "HttpsRedirect",
                  "order": 1,
                  "conditions": [
                    {
                      "name": "RequestScheme",
                      "parameters": {
                        "@odata.type": "#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestSchemeConditionParameters",
                        "operator": "Equal",
                        "matchValues": [
                          "HTTP"
                        ]
                      }
                    }
                  ],
                  "actions": [
                    {
                      "name": "UrlRedirect",
                      "parameters": {
                        "@odata.type": "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRedirectActionParameters",
                        "redirectType": "PermanentRedirect",
                        "destinationProtocol": "Https",
                        "customHostname": "[parameters('customDomain')]"
                      }
                    }
                  ]
                },
                {
                  "name": "SPARewrite",
                  "order": 2,
                  "conditions": [
                    {
                      "name": "UrlFileExtension",
                      "parameters": {
                        "@odata.type": "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlFileExtensionMatchConditionParameters",
                        "operator": "GreaterThan",
                        "negateCondition": true,
                        "matchValues": [
                          "0"
                        ],
                        "transforms": [
                        ]
                      }
                    }
                  ],
                  "actions": [
                    {
                      "name": "UrlRewrite",
                      "parameters": {
                        "@odata.type": "#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRewriteActionParameters",
                        "sourcePattern": "/",
                        "destination": "/index.html",
                        "preserveUnmatchedPath": false
                      }
                    }
                  ]
                }
              ]
            }
          },
          "resources": [
            {
              "name": "[variables('cdnCustomDomainName')]",
              "type": "customdomains",
              "apiVersion": "2019-04-15",
              "dependsOn": [
                "[parameters('cdn')]"
              ],
              "properties": {
                "hostName": "[parameters('customDomain')]"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('location')]",
      "apiVersion": "2015-05-01",
      "kind": "web",
      "dependsOn": [
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('appServiceName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "applicationId": "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      }
    },
    {
      "name": "[variables('appServicePlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[parameters('location')]",
      "apiVersion": "2019-08-01",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      }
    },
    {
      "name": "[variables('appStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('location')]",
      "apiVersion": "2018-07-01",
      "sku": {
        "name": "[parameters('storageType')]"
      },
      "dependsOn": [
      ],
      "tags": {
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          }
        }
      }
    },
    {
      "name": "[variables('appServiceName')]",
      "type": "Microsoft.Web/sites",
      "location": "[parameters('location')]",
      "apiVersion": "2018-11-01",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('appStorageName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "webSocketsEnabled": true,
          "http20Enabled": true,
          "clientAffinityEnabled": false,
          "ftpsState": "Disabled",
          "cors": {
            "allowedOrigins": [
              "[variables('customDomainUri')]"
            ],
            "supportCredentials": true
          }
        }
      }
    },
    {
      "name": "[concat(variables('appServiceName'), '/appsettings')]",
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      ],
      "properties": {
        "AzureWebJobsDisableHomepage": "true",
        "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('appStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('appStorageName')), '2018-02-01').keys[0].value)]",
        "Storage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('appStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('appStorageName')), '2018-02-01').keys[0].value)]",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "FUNCTIONS_EXTENSION_VERSION": "~3",
        "WEBSITE_RUN_FROM_PACKAGE": "1",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]",

        "WebPush:PublicServerUri": "[variables('customDomainUri')]",
        "WebPush:PublicKey": "[parameters('webPushPublicKey')]",
        "WebPush:PrivateKey": "[parameters('webPushPrivateKey')]",

        "AzureAD:ClientId": "[parameters('clientId')]",
        "AzureAD:Audience": "[parameters('applicationIdURI')]"
      }
    },
    {
      "name": "[variables('appAlertActionGroup')]",
      "type": "microsoft.insights/actionGroups",
      "location": "Global",
      "apiVersion": "2019-06-01",
      "properties": {
        "groupShortName": "webAppAG",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "notify by email",
            "emailAddress": "[parameters('alertEmailAddress')]",
            "useCommonAlertSchema": true
          }
        ],
        "smsReceivers": [
        ],
        "webhookReceivers": [
        ],
        "itsmReceivers": [
        ],
        "azureAppPushReceivers": [
          {
            "name": "notify by app",
            "emailAddress": "[parameters('alertEmailAddress')]"
          }
        ],
        "automationRunbookReceivers": [
        ],
        "voiceReceivers": [
        ],
        "logicAppReceivers": [
        ],
        "azureFunctionReceivers": [
        ],
        "armRoleReceivers": [
          {
            /*
           * Use "Owner" role:
           * https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#owner
           */
            "name": "owner",
            "roleId": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
            "useCommonAlertSchema": true
          }
        ]
      },
      "dependsOn": [
      ]
    },
    {
      "name": "[variables('appInsightsExceptionQueryName')]",
      "type": "microsoft.insights/scheduledqueryrules",
      "location": "[parameters('location')]",
      "apiVersion": "2018-04-16",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Insights/components/', variables('appInsightsName'))]": "Resource"
      },
      "scale": null,
      "properties": {
        "description": "Scheduled query to find exceptions occurred in the app in last 5 minutes.",
        "enabled": "true",
        "source": {
          "query": "exceptions",
          "authorizedResources": [
          ],
          "dataSourceId": "[resourceId('microsoft.insights/components', variables('appInsightsName'))]",
          "queryType": "ResultCount"
        },
        "schedule": {
          "frequencyInMinutes": 5,
          "timeWindowInMinutes": 5
        },
        "action": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
          "severity": "2",
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 0
          },
          "aznsAction": {
            "actionGroup": [
              "[resourceId('microsoft.insights/actionGroups', variables('appAlertActionGroup'))]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('microsoft.insights/components', variables('appInsightsName'))]"
      ]
    },
    /*
     * See more details about supported metrics:
     * https://docs.microsoft.com/en-us/azure/azure-monitor/platform/metrics-supported
     */
    {
      "name": "[variables('appHighUsageAlertName')]",
      "type": "microsoft.insights/metricalerts",
      "location": "global",
      "apiVersion": "2018-03-01",
      "properties": {
        "description": "High usage of our Company Web App.",
        "enabled": true,
        "severity": 4,
        "scopes": [
          "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
        ],
        "evaluationFrequency": "PT1M",
        "windowSize": "PT1M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "name": "CPU Percentage",
              "metricName": "CpuPercentage",
              "dimensions": [
              ],
              "operator": "GreaterThan",
              "criterionType": "StaticThresholdCriterion",
              "threshold": 50,
              "timeAggregation": "Total"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('microsoft.insights/actionGroups', variables('appAlertActionGroup'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      ]
    },
    {
      "name": "[variables('spaAppPing')]",
      "type": "Microsoft.Insights/webtests",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Insights/components', variables('appInsightsName')))]": "Resource",
        "displayName": "Front page ping test"
      },
      "properties": {
        "SyntheticMonitorId": "[variables('spaAppPing')]",
        "Name": "[variables('spaAppPing')]",
        "Description": "SPA app ping test",
        "Enabled": true,
        "Frequency": 300,
        "Timeout": 120,
        "Kind": "ping",
        "Locations": [
          {
            "Id": "emea-se-sto-edge"
          },
          {
            "Id": "emea-nl-ams-azr"
          }
        ],
        "Configuration": {
          "WebTest": "[concat('<WebTest Name=\"spaAppPing\" Id=\"bd64298a-fed7-46bf-b6e4-424a4dd671c2\"  Enabled=\"True\"  Timeout=\"120\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" PreAuthenticate=\"True\" Proxy=\"default\">        <Items>        <Request         Method=\"GET\"         Guid=\"af2d44c8-86e8-7ab0-bc73-e12c778c60ea\"         Version=\"1.1\"         Url=\"', variables('customDomainUri'), '\"         ThinkTime=\"0\"         Timeout=\"120\"         ParseDependentRequests=\"True\"         FollowRedirects=\"True\"         RecordResult=\"True\"         Cache=\"False\"         ResponseTimeGoal=\"0\"         Encoding=\"utf-8\"         ExpectedHttpStatusCode=\"200\"         ExpectedResponseUrl=\"\"         ReportingName=\"\"         IgnoreHttpStatusCode=\"False\" />        </Items>        </WebTest>')]"
        }
      }
    },
    {
      "name": "spaAppPingTestAlert",
      "type": "microsoft.insights/metricalerts",
      "location": "global",
      "apiVersion": "2018-03-01",
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Insights/components', variables('appInsightsName')))]": "Resource",
        "[concat('hidden-link:', resourceId('Microsoft.Insights/webtests', variables('spaAppPing')))]": "Resource"
      },
      "properties": {
        "description": "SPA app ping test.",
        "enabled": true,
        "severity": 4,
        "scopes": [
          "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
          "[resourceId('Microsoft.Insights/webtests', variables('spaAppPing'))]"
        ],
        "evaluationFrequency": "PT5M",
        "windowSize": "PT15M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria",
          "webTestId": "[resourceId('Microsoft.Insights/webtests', variables('spaAppPing'))]",
          "componentId": "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
          "failedLocationCount": 1
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('microsoft.insights/actionGroups', variables('appAlertActionGroup'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Insights/webtests', variables('spaAppPing'))]"
      ]
    },
    {
      "name": "[variables('backendPing')]",
      "type": "Microsoft.Insights/webtests",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-05-01",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Insights/components', variables('appInsightsName')))]": "Resource",
        "displayName": "Backend ping test"
      },
      "properties": {
        "SyntheticMonitorId": "[variables('backendPing')]",
        "Name": "[variables('backendPing')]",
        "Description": "Backend ping test",
        "Enabled": true,
        "Frequency": 300,
        "Timeout": 120,
        "Kind": "ping",
        "Locations": [
          {
            "Id": "emea-se-sto-edge"
          },
          {
            "Id": "emea-nl-ams-azr"
          }
        ],
        "Configuration": {
          "WebTest": "[concat('<WebTest Name=\"backendPing\" Id=\"bd64298a-fed7-46bf-b6e4-424a4dd671c2\"  Enabled=\"True\"  Timeout=\"120\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" PreAuthenticate=\"True\" Proxy=\"default\">        <Items>        <Request         Method=\"GET\"         Guid=\"af2d44c8-86e8-7ab0-bc73-e12c778c60ea\"         Version=\"1.1\"         Url=\"', concat('https://',reference(resourceId('Microsoft.Web/sites', variables('appServiceName'))).hostNames[0]), '\"         ThinkTime=\"0\"         Timeout=\"120\"         ParseDependentRequests=\"True\"         FollowRedirects=\"True\"         RecordResult=\"True\"         Cache=\"False\"         ResponseTimeGoal=\"0\"         Encoding=\"utf-8\"         ExpectedHttpStatusCode=\"204\"         ExpectedResponseUrl=\"\"         ReportingName=\"\"         IgnoreHttpStatusCode=\"False\" />        </Items>        </WebTest>')]"
        }
      }
    },
    {
      "name": "backendPingTestAlert",
      "type": "microsoft.insights/metricalerts",
      "location": "global",
      "apiVersion": "2018-03-01",
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Insights/components', variables('appInsightsName')))]": "Resource",
        "[concat('hidden-link:', resourceId('Microsoft.Insights/webtests', variables('backendPing')))]": "Resource"
      },
      "properties": {
        "description": "Backend ping test.",
        "enabled": true,
        "severity": 4,
        "scopes": [
          "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
          "[resourceId('Microsoft.Insights/webtests', variables('backendPing'))]"
        ],
        "evaluationFrequency": "PT5M",
        "windowSize": "PT15M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria",
          "webTestId": "[resourceId('Microsoft.Insights/webtests', variables('backendPing'))]",
          "componentId": "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
          "failedLocationCount": 1
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('microsoft.insights/actionGroups', variables('appAlertActionGroup'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Insights/webtests', variables('backendPing'))]"
      ]
    }
  ],
  "outputs": {
    "appStorageName": {
      "type": "string",
      "value": "[variables('appStorageName')]"
    },
    "webStorageName": {
      "type": "string",
      "value": "[variables('webStorageName')]"
    },
    "webAppName": {
      "type": "string",
      "value": "[variables('appServiceName')]"
    },
    "webAppUri": {
      "type": "string",
      "value": "[concat('https://',reference(resourceId('Microsoft.Web/sites', variables('appServiceName'))).hostNames[0])]"
    },
    "instrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
    },
    "cdnName": {
      "type": "string",
      "value": "[variables('cdnName')]"
    },
    "cdnCustomDomainName": {
      "type": "string",
      "value": "[variables('cdnCustomDomainName')]"
    },
    "cdnCustomDomainUri": {
      "type": "string",
      "value": "[variables('customDomainUri')]"
    }
  }
}
